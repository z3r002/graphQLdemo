{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zer00/works/web/graphqlapp/src/GetCats.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n//\n// const GetCats = () => (\n//     <Query query={gql`\n//    query{\n//   cats{\n//     id\n//     name\n//   }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.cats.map(({id, name}) => (\n//                         <li key={id}>{name ? name : 'incognoito'}</li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default GetCats\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport React from \"react\";\nconst GET_Cats = gql`\n    query{\n        cats{\n            id\n            name\n      }\n    }\n`;\nconst ADD_CAT = gql`\n    mutation($name : String!) {\n        createCat(name: $name) {\n            id\n            name\n        }\n    }\n`;\nexport default function GetCats() {\n  _s();\n\n  let input;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_Cats);\n  const [addCat] = useMutation(ADD_CAT);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`; // return (\n  //     <div key={id}>\n  //         <form\n  //             onSubmit={e => {\n  //                 e.preventDefault();\n  //                 addCat({variables:{name: input.value}});\n  //                 input.value = '';\n  //             }}>\n  //             <input ref={node =>{\n  //                 input = node;\n  //             }}/>\n  //             <button type=\"submit\">Add Cat</button>\n  //         </form>\n  //\n  //     <ul>\n  //         {data.cats.map(({id, name}) => (\n  //             <li key={id} value={name}>\n  //                 {name}\n  //             </li>\n  //         ))}\n  //     </ul>\n  //     </div>\n  //\n  // );\n\n  return data.todos.map(({\n    id,\n    type\n  }) => {\n    let input;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          addCat({\n            variables: {\n              id,\n              name: input.value\n            }\n          });\n          input.value = '';\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: node => {\n            input = node;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  });\n}\n\n_s(GetCats, \"dZsYA1w/TcHNZqpeypTCzop9Q8g=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = GetCats;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetCats\");","map":{"version":3,"sources":["/home/zer00/works/web/graphqlapp/src/GetCats.js"],"names":["gql","useQuery","useMutation","React","GET_Cats","ADD_CAT","GetCats","input","loading","error","data","addCat","message","todos","map","id","type","e","preventDefault","variables","name","value","node"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGJ,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AAQA,MAAMK,OAAO,GAAGL,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AAQA,eAAe,SAASM,OAAT,GAAmB;AAAA;;AAC9B,MAAIC,KAAJ;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACG,QAAD,CAAzC;AACA,QAAM,CAACO,MAAD,IAAYT,WAAW,CAACG,OAAD,CAA7B;AAEA,MAAIG,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACG,OAAQ,EAA/B,CANmB,CAQ9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOF,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,KAAkB;AACpC,QAAIT,KAAJ;AAEA,wBACI;AAAA,8BACI;AAAA,kBAAIS;AAAJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,QAAQ,EAAEC,CAAC,IAAI;AACXA,UAAAA,CAAC,CAACC,cAAF;AACAP,UAAAA,MAAM,CAAC;AAAEQ,YAAAA,SAAS,EAAE;AAAEJ,cAAAA,EAAF;AAAMK,cAAAA,IAAI,EAAEb,KAAK,CAACc;AAAlB;AAAb,WAAD,CAAN;AACAd,UAAAA,KAAK,CAACc,KAAN,GAAc,EAAd;AACH,SALL;AAAA,gCAOI;AACI,UAAA,GAAG,EAAEC,IAAI,IAAI;AACTf,YAAAA,KAAK,GAAGe,IAAR;AACH;AAHL;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAYI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,OAAUP,EAAV;AAAA;AAAA;AAAA;AAAA,YADJ;AAmBH,GAtBM,CAAP;AAwBH;;GAxDuBT,O;UAEaL,Q,EACfC,W;;;KAHEI,O","sourcesContent":["// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n//\n// const GetCats = () => (\n//     <Query query={gql`\n//    query{\n//   cats{\n//     id\n//     name\n//   }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.cats.map(({id, name}) => (\n//                         <li key={id}>{name ? name : 'incognoito'}</li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default GetCats\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport React from \"react\";\nconst GET_Cats = gql`\n    query{\n        cats{\n            id\n            name\n      }\n    }\n`;\nconst ADD_CAT = gql`\n    mutation($name : String!) {\n        createCat(name: $name) {\n            id\n            name\n        }\n    }\n`;\nexport default function GetCats() {\n    let input;\n    const { loading, error, data } = useQuery(GET_Cats);\n    const [addCat,] = useMutation(ADD_CAT);\n\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    // return (\n    //     <div key={id}>\n    //         <form\n    //             onSubmit={e => {\n    //                 e.preventDefault();\n    //                 addCat({variables:{name: input.value}});\n    //                 input.value = '';\n    //             }}>\n    //             <input ref={node =>{\n    //                 input = node;\n    //             }}/>\n    //             <button type=\"submit\">Add Cat</button>\n    //         </form>\n    //\n    //     <ul>\n    //         {data.cats.map(({id, name}) => (\n    //             <li key={id} value={name}>\n    //                 {name}\n    //             </li>\n    //         ))}\n    //     </ul>\n    //     </div>\n    //\n    // );\n    return data.todos.map(({ id, type }) => {\n        let input;\n\n        return (\n            <div key={id}>\n                <p>{type}</p>\n                <form\n                    onSubmit={e => {\n                        e.preventDefault();\n                        addCat({ variables: { id, name: input.value } });\n                        input.value = '';\n                    }}\n                >\n                    <input\n                        ref={node => {\n                            input = node;\n                        }}\n                    />\n                    <button type=\"submit\">Update Todo</button>\n                </form>\n            </div>\n        );\n    });\n\n}\n\n"]},"metadata":{},"sourceType":"module"}