{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zer00/works/web/graphqlapp/src/GetCats.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n//\n// const GetCats = () => (\n//     <Query query={gql`\n//    query{\n//   cats{\n//     id\n//     name\n//   }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.cats.map(({id, name}) => (\n//                         <li key={id}>{name ? name : 'incognoito'}</li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default GetCats\nimport { gql, useQuery } from '@apollo/client';\nimport React from \"react\";\nconst GET_Cats = gql`\n    query{\n        cats{\n            id\n            name\n      }\n    }\n`;\nexport default function GetCats() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_Cats);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: data.cats.map(({\n      id,\n      name\n    }) => /*#__PURE__*/_jsxDEV(\"li\", {\n      value: name,\n      children: name\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GetCats, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetCats;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetCats\");","map":{"version":3,"sources":["/home/zer00/works/web/graphqlapp/src/GetCats.js"],"names":["gql","useQuery","React","GET_Cats","GetCats","loading","error","data","message","cats","map","id","name"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGH,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AAQA,eAAe,SAASI,OAAT,GAAmB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACE,QAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,sBACI;AAAA,cACKD,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAc,CAAC;AAACC,MAAAA,EAAD;AAAKC,MAAAA;AAAL,KAAD,kBACX;AAAa,MAAA,KAAK,EAAEA,IAApB;AAAA,gBACKA;AADL,OAASD,EAAT;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAhBuBP,O;UACaH,Q;;;KADbG,O","sourcesContent":["// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n//\n// const GetCats = () => (\n//     <Query query={gql`\n//    query{\n//   cats{\n//     id\n//     name\n//   }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.cats.map(({id, name}) => (\n//                         <li key={id}>{name ? name : 'incognoito'}</li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default GetCats\nimport { gql, useQuery } from '@apollo/client';\nimport React from \"react\";\nconst GET_Cats = gql`\n    query{\n        cats{\n            id\n            name\n      }\n    }\n`;\nexport default function GetCats() {\n    const { loading, error, data } = useQuery(GET_Cats);\n\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    return (\n        <ul>\n            {data.cats.map(({id, name}) => (\n                <li key={id} value={name}>\n                    {name}\n                </li>\n            ))}\n        </ul>\n\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}