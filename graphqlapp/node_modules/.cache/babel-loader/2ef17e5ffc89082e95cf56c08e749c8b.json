{"ast":null,"code":"/**\r\n * This function transforms a JS object `ObjMap<Promise<T>>` into\r\n * a `Promise<ObjMap<T>>`\r\n *\r\n * This is akin to bluebird's `Promise.props`, but implemented only using\r\n * `Promise.all` so it will work with any implementation of ES6 promises.\r\n */\nexport default function promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n}","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/jsutils/promiseForObject.mjs"],"names":["promiseForObject","object","keys","Object","valuesAndPromises","map","name","Promise","all","then","values","reduce","resolvedObject","value","i","create"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AAC/C,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,MAAZ,CAAX;AACA,MAAIG,iBAAiB,GAAGF,IAAI,CAACG,GAAL,CAAS,UAAUC,IAAV,EAAgB;AAC/C,WAAOL,MAAM,CAACK,IAAD,CAAb;AACD,GAFuB,CAAxB;AAGA,SAAOC,OAAO,CAACC,GAAR,CAAYJ,iBAAZ,EAA+BK,IAA/B,CAAoC,UAAUC,MAAV,EAAkB;AAC3D,WAAOA,MAAM,CAACC,MAAP,CAAc,UAAUC,cAAV,EAA0BC,KAA1B,EAAiCC,CAAjC,EAAoC;AACvDF,MAAAA,cAAc,CAACV,IAAI,CAACY,CAAD,CAAL,CAAd,GAA0BD,KAA1B;AACA,aAAOD,cAAP;AACD,KAHM,EAGJT,MAAM,CAACY,MAAP,CAAc,IAAd,CAHI,CAAP;AAID,GALM,CAAP;AAMD","sourcesContent":["/**\r\n * This function transforms a JS object `ObjMap<Promise<T>>` into\r\n * a `Promise<ObjMap<T>>`\r\n *\r\n * This is akin to bluebird's `Promise.props`, but implemented only using\r\n * `Promise.all` so it will work with any implementation of ES6 promises.\r\n */\r\nexport default function promiseForObject(object) {\r\n  var keys = Object.keys(object);\r\n  var valuesAndPromises = keys.map(function (name) {\r\n    return object[name];\r\n  });\r\n  return Promise.all(valuesAndPromises).then(function (values) {\r\n    return values.reduce(function (resolvedObject, value, i) {\r\n      resolvedObject[keys[i]] = value;\r\n      return resolvedObject;\r\n    }, Object.create(null));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}