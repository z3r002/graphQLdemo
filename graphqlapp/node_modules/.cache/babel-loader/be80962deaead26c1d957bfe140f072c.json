{"ast":null,"code":"import { Source, isSource } from \"../language/source.mjs\";\nimport { TokenKind } from \"../language/tokenKind.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"../language/lexer.mjs\";\nimport { dedentBlockStringValue, getBlockStringIndentation } from \"../language/blockString.mjs\";\n/**\r\n * Strips characters that are not significant to the validity or execution\r\n * of a GraphQL document:\r\n *   - UnicodeBOM\r\n *   - WhiteSpace\r\n *   - LineTerminator\r\n *   - Comment\r\n *   - Comma\r\n *   - BlockString indentation\r\n *\r\n * Note: It is required to have a delimiter character between neighboring\r\n * non-punctuator tokens and this function always uses single space as delimiter.\r\n *\r\n * It is guaranteed that both input and output documents if parsed would result\r\n * in the exact same AST except for nodes location.\r\n *\r\n * Warning: It is guaranteed that this function will always produce stable results.\r\n * However, it's not guaranteed that it will stay the same between different\r\n * releases due to bugfixes or changes in the GraphQL specification.\r\n *\r\n * Query example:\r\n *\r\n * query SomeQuery($foo: String!, $bar: String) {\r\n *   someField(foo: $foo, bar: $bar) {\r\n *     a\r\n *     b {\r\n *       c\r\n *       d\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * Becomes:\r\n *\r\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\r\n *\r\n * SDL example:\r\n *\r\n * \"\"\"\r\n * Type description\r\n * \"\"\"\r\n * type Foo {\r\n *   \"\"\"\r\n *   Field description\r\n *   \"\"\"\r\n *   bar: String\r\n * }\r\n *\r\n * Becomes:\r\n *\r\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\r\n */\n\nexport function stripIgnoredCharacters(source) {\n  var sourceObj = isSource(source) ? source : new Source(source);\n  var body = sourceObj.body;\n  var lexer = new Lexer(sourceObj);\n  var strippedBody = '';\n  var wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    var currentToken = lexer.token;\n    var tokenKind = currentToken.kind;\n    /**\r\n     * Every two non-punctuator tokens should have space between them.\r\n     * Also prevent case of non-punctuator token following by spread resulting\r\n     * in invalid token (e.g. `1...` is invalid Float token).\r\n     */\n\n    var isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    var tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  var rawStr = blockStr.slice(3, -3);\n  var body = dedentBlockStringValue(rawStr);\n\n  if (getBlockStringIndentation(body) > 0) {\n    body = '\\n' + body;\n  }\n\n  var lastChar = body[body.length - 1];\n  var hasTrailingQuote = lastChar === '\"' && body.slice(-4) !== '\\\\\"\"\"';\n\n  if (hasTrailingQuote || lastChar === '\\\\') {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/utilities/stripIgnoredCharacters.mjs"],"names":["Source","isSource","TokenKind","Lexer","isPunctuatorTokenKind","dedentBlockStringValue","getBlockStringIndentation","stripIgnoredCharacters","source","sourceObj","body","lexer","strippedBody","wasLastAddedTokenNonPunctuator","advance","kind","EOF","currentToken","token","tokenKind","isNonPunctuator","SPREAD","tokenBody","slice","start","end","BLOCK_STRING","dedentBlockString","blockStr","rawStr","lastChar","length","hasTrailingQuote"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,wBAAjC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,KAAT,EAAgBC,qBAAhB,QAA6C,uBAA7C;AACA,SAASC,sBAAT,EAAiCC,yBAAjC,QAAkE,6BAAlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7C,MAAIC,SAAS,GAAGR,QAAQ,CAACO,MAAD,CAAR,GAAmBA,MAAnB,GAA4B,IAAIR,MAAJ,CAAWQ,MAAX,CAA5C;AACA,MAAIE,IAAI,GAAGD,SAAS,CAACC,IAArB;AACA,MAAIC,KAAK,GAAG,IAAIR,KAAJ,CAAUM,SAAV,CAAZ;AACA,MAAIG,YAAY,GAAG,EAAnB;AACA,MAAIC,8BAA8B,GAAG,KAArC;;AAEA,SAAOF,KAAK,CAACG,OAAN,GAAgBC,IAAhB,KAAyBb,SAAS,CAACc,GAA1C,EAA+C;AAC7C,QAAIC,YAAY,GAAGN,KAAK,CAACO,KAAzB;AACA,QAAIC,SAAS,GAAGF,YAAY,CAACF,IAA7B;AACA;AACJ;AACA;AACA;AACA;;AAEI,QAAIK,eAAe,GAAG,CAAChB,qBAAqB,CAACa,YAAY,CAACF,IAAd,CAA5C;;AAEA,QAAIF,8BAAJ,EAAoC;AAClC,UAAIO,eAAe,IAAIH,YAAY,CAACF,IAAb,KAAsBb,SAAS,CAACmB,MAAvD,EAA+D;AAC7DT,QAAAA,YAAY,IAAI,GAAhB;AACD;AACF;;AAED,QAAIU,SAAS,GAAGZ,IAAI,CAACa,KAAL,CAAWN,YAAY,CAACO,KAAxB,EAA+BP,YAAY,CAACQ,GAA5C,CAAhB;;AAEA,QAAIN,SAAS,KAAKjB,SAAS,CAACwB,YAA5B,EAA0C;AACxCd,MAAAA,YAAY,IAAIe,iBAAiB,CAACL,SAAD,CAAjC;AACD,KAFD,MAEO;AACLV,MAAAA,YAAY,IAAIU,SAAhB;AACD;;AAEDT,IAAAA,8BAA8B,GAAGO,eAAjC;AACD;;AAED,SAAOR,YAAP;AACD;;AAED,SAASe,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC;AACA,MAAIC,MAAM,GAAGD,QAAQ,CAACL,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAb;AACA,MAAIb,IAAI,GAAGL,sBAAsB,CAACwB,MAAD,CAAjC;;AAEA,MAAIvB,yBAAyB,CAACI,IAAD,CAAzB,GAAkC,CAAtC,EAAyC;AACvCA,IAAAA,IAAI,GAAG,OAAOA,IAAd;AACD;;AAED,MAAIoB,QAAQ,GAAGpB,IAAI,CAACA,IAAI,CAACqB,MAAL,GAAc,CAAf,CAAnB;AACA,MAAIC,gBAAgB,GAAGF,QAAQ,KAAK,GAAb,IAAoBpB,IAAI,CAACa,KAAL,CAAW,CAAC,CAAZ,MAAmB,OAA9D;;AAEA,MAAIS,gBAAgB,IAAIF,QAAQ,KAAK,IAArC,EAA2C;AACzCpB,IAAAA,IAAI,IAAI,IAAR;AACD;;AAED,SAAO,QAAQA,IAAR,GAAe,KAAtB;AACD","sourcesContent":["import { Source, isSource } from \"../language/source.mjs\";\r\nimport { TokenKind } from \"../language/tokenKind.mjs\";\r\nimport { Lexer, isPunctuatorTokenKind } from \"../language/lexer.mjs\";\r\nimport { dedentBlockStringValue, getBlockStringIndentation } from \"../language/blockString.mjs\";\r\n/**\r\n * Strips characters that are not significant to the validity or execution\r\n * of a GraphQL document:\r\n *   - UnicodeBOM\r\n *   - WhiteSpace\r\n *   - LineTerminator\r\n *   - Comment\r\n *   - Comma\r\n *   - BlockString indentation\r\n *\r\n * Note: It is required to have a delimiter character between neighboring\r\n * non-punctuator tokens and this function always uses single space as delimiter.\r\n *\r\n * It is guaranteed that both input and output documents if parsed would result\r\n * in the exact same AST except for nodes location.\r\n *\r\n * Warning: It is guaranteed that this function will always produce stable results.\r\n * However, it's not guaranteed that it will stay the same between different\r\n * releases due to bugfixes or changes in the GraphQL specification.\r\n *\r\n * Query example:\r\n *\r\n * query SomeQuery($foo: String!, $bar: String) {\r\n *   someField(foo: $foo, bar: $bar) {\r\n *     a\r\n *     b {\r\n *       c\r\n *       d\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * Becomes:\r\n *\r\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\r\n *\r\n * SDL example:\r\n *\r\n * \"\"\"\r\n * Type description\r\n * \"\"\"\r\n * type Foo {\r\n *   \"\"\"\r\n *   Field description\r\n *   \"\"\"\r\n *   bar: String\r\n * }\r\n *\r\n * Becomes:\r\n *\r\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\r\n */\r\n\r\nexport function stripIgnoredCharacters(source) {\r\n  var sourceObj = isSource(source) ? source : new Source(source);\r\n  var body = sourceObj.body;\r\n  var lexer = new Lexer(sourceObj);\r\n  var strippedBody = '';\r\n  var wasLastAddedTokenNonPunctuator = false;\r\n\r\n  while (lexer.advance().kind !== TokenKind.EOF) {\r\n    var currentToken = lexer.token;\r\n    var tokenKind = currentToken.kind;\r\n    /**\r\n     * Every two non-punctuator tokens should have space between them.\r\n     * Also prevent case of non-punctuator token following by spread resulting\r\n     * in invalid token (e.g. `1...` is invalid Float token).\r\n     */\r\n\r\n    var isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\r\n\r\n    if (wasLastAddedTokenNonPunctuator) {\r\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\r\n        strippedBody += ' ';\r\n      }\r\n    }\r\n\r\n    var tokenBody = body.slice(currentToken.start, currentToken.end);\r\n\r\n    if (tokenKind === TokenKind.BLOCK_STRING) {\r\n      strippedBody += dedentBlockString(tokenBody);\r\n    } else {\r\n      strippedBody += tokenBody;\r\n    }\r\n\r\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\r\n  }\r\n\r\n  return strippedBody;\r\n}\r\n\r\nfunction dedentBlockString(blockStr) {\r\n  // skip leading and trailing triple quotations\r\n  var rawStr = blockStr.slice(3, -3);\r\n  var body = dedentBlockStringValue(rawStr);\r\n\r\n  if (getBlockStringIndentation(body) > 0) {\r\n    body = '\\n' + body;\r\n  }\r\n\r\n  var lastChar = body[body.length - 1];\r\n  var hasTrailingQuote = lastChar === '\"' && body.slice(-4) !== '\\\\\"\"\"';\r\n\r\n  if (hasTrailingQuote || lastChar === '\\\\') {\r\n    body += '\\n';\r\n  }\r\n\r\n  return '\"\"\"' + body + '\"\"\"';\r\n}\r\n"]},"metadata":{},"sourceType":"module"}