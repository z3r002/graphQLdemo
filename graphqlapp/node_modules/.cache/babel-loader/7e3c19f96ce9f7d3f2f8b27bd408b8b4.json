{"ast":null,"code":"import isPromise from \"./jsutils/isPromise.mjs\";\nimport { parse } from \"./language/parser.mjs\";\nimport { validate } from \"./validation/validate.mjs\";\nimport { validateSchema } from \"./type/validate.mjs\";\nimport { execute } from \"./execution/execute.mjs\";\n/**\r\n * This is the primary entry point function for fulfilling GraphQL operations\r\n * by parsing, validating, and executing a GraphQL document along side a\r\n * GraphQL schema.\r\n *\r\n * More sophisticated GraphQL servers, such as those which persist queries,\r\n * may wish to separate the validation and execution phases to a static time\r\n * tooling step, and a server runtime step.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments:\r\n *\r\n * schema:\r\n *    The GraphQL type system to use when validating and executing a query.\r\n * source:\r\n *    A GraphQL language formatted string representing the requested operation.\r\n * rootValue:\r\n *    The value provided as the first argument to resolver functions on the top\r\n *    level type (e.g. the query object type).\r\n * contextValue:\r\n *    The context value is provided as an argument to resolver functions after\r\n *    field arguments. It is used to pass shared information useful at any point\r\n *    during executing this query, for example the currently logged in user and\r\n *    connections to databases or other services.\r\n * variableValues:\r\n *    A mapping of variable name to runtime value to use for all variables\r\n *    defined in the requestString.\r\n * operationName:\r\n *    The name of the operation to use if requestString contains multiple\r\n *    possible operations. Can be omitted if requestString contains only\r\n *    one operation.\r\n * fieldResolver:\r\n *    A resolver function to use when one is not provided by the schema.\r\n *    If not provided, the default field resolver is used (which looks for a\r\n *    value or method on the source value with the field's name).\r\n * typeResolver:\r\n *    A type resolver function to use when none is provided by the schema.\r\n *    If not provided, the default type resolver is used (which looks for a\r\n *    `__typename` field or alternatively calls the `isTypeOf` method).\r\n */\n\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  var _arguments = arguments;\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\n      schema: argsOrSchema,\n      source: source,\n      rootValue: rootValue,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver,\n      typeResolver: typeResolver\n    }));\n  });\n}\n/**\r\n * The graphqlSync function also fulfills GraphQL operations by parsing,\r\n * validating, and executing a GraphQL document along side a GraphQL schema.\r\n * However, it guarantees to complete synchronously (or throw an error) assuming\r\n * that all field resolvers are also synchronous.\r\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\n    schema: argsOrSchema,\n    source: source,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  }); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  var schema = args.schema,\n      source = args.source,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // Validate Schema\n\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute({\n    schema: schema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/graphql.mjs"],"names":["isPromise","parse","validate","validateSchema","execute","graphql","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","graphqlSync","result","Error","args","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"mappings":"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","sourcesContent":["import isPromise from \"./jsutils/isPromise.mjs\";\r\nimport { parse } from \"./language/parser.mjs\";\r\nimport { validate } from \"./validation/validate.mjs\";\r\nimport { validateSchema } from \"./type/validate.mjs\";\r\nimport { execute } from \"./execution/execute.mjs\";\r\n/**\r\n * This is the primary entry point function for fulfilling GraphQL operations\r\n * by parsing, validating, and executing a GraphQL document along side a\r\n * GraphQL schema.\r\n *\r\n * More sophisticated GraphQL servers, such as those which persist queries,\r\n * may wish to separate the validation and execution phases to a static time\r\n * tooling step, and a server runtime step.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments:\r\n *\r\n * schema:\r\n *    The GraphQL type system to use when validating and executing a query.\r\n * source:\r\n *    A GraphQL language formatted string representing the requested operation.\r\n * rootValue:\r\n *    The value provided as the first argument to resolver functions on the top\r\n *    level type (e.g. the query object type).\r\n * contextValue:\r\n *    The context value is provided as an argument to resolver functions after\r\n *    field arguments. It is used to pass shared information useful at any point\r\n *    during executing this query, for example the currently logged in user and\r\n *    connections to databases or other services.\r\n * variableValues:\r\n *    A mapping of variable name to runtime value to use for all variables\r\n *    defined in the requestString.\r\n * operationName:\r\n *    The name of the operation to use if requestString contains multiple\r\n *    possible operations. Can be omitted if requestString contains only\r\n *    one operation.\r\n * fieldResolver:\r\n *    A resolver function to use when one is not provided by the schema.\r\n *    If not provided, the default field resolver is used (which looks for a\r\n *    value or method on the source value with the field's name).\r\n * typeResolver:\r\n *    A type resolver function to use when none is provided by the schema.\r\n *    If not provided, the default type resolver is used (which looks for a\r\n *    `__typename` field or alternatively calls the `isTypeOf` method).\r\n */\r\n\r\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\r\n  var _arguments = arguments;\r\n\r\n  /* eslint-enable no-redeclare */\r\n  // Always return a Promise for a consistent API.\r\n  return new Promise(function (resolve) {\r\n    return resolve( // Extract arguments from object args if provided.\r\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\r\n      schema: argsOrSchema,\r\n      source: source,\r\n      rootValue: rootValue,\r\n      contextValue: contextValue,\r\n      variableValues: variableValues,\r\n      operationName: operationName,\r\n      fieldResolver: fieldResolver,\r\n      typeResolver: typeResolver\r\n    }));\r\n  });\r\n}\r\n/**\r\n * The graphqlSync function also fulfills GraphQL operations by parsing,\r\n * validating, and executing a GraphQL document along side a GraphQL schema.\r\n * However, it guarantees to complete synchronously (or throw an error) assuming\r\n * that all field resolvers are also synchronous.\r\n */\r\n\r\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\r\n  /* eslint-enable no-redeclare */\r\n  // Extract arguments from object args if provided.\r\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({\r\n    schema: argsOrSchema,\r\n    source: source,\r\n    rootValue: rootValue,\r\n    contextValue: contextValue,\r\n    variableValues: variableValues,\r\n    operationName: operationName,\r\n    fieldResolver: fieldResolver,\r\n    typeResolver: typeResolver\r\n  }); // Assert that the execution was synchronous.\r\n\r\n  if (isPromise(result)) {\r\n    throw new Error('GraphQL execution failed to complete synchronously.');\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction graphqlImpl(args) {\r\n  var schema = args.schema,\r\n      source = args.source,\r\n      rootValue = args.rootValue,\r\n      contextValue = args.contextValue,\r\n      variableValues = args.variableValues,\r\n      operationName = args.operationName,\r\n      fieldResolver = args.fieldResolver,\r\n      typeResolver = args.typeResolver; // Validate Schema\r\n\r\n  var schemaValidationErrors = validateSchema(schema);\r\n\r\n  if (schemaValidationErrors.length > 0) {\r\n    return {\r\n      errors: schemaValidationErrors\r\n    };\r\n  } // Parse\r\n\r\n\r\n  var document;\r\n\r\n  try {\r\n    document = parse(source);\r\n  } catch (syntaxError) {\r\n    return {\r\n      errors: [syntaxError]\r\n    };\r\n  } // Validate\r\n\r\n\r\n  var validationErrors = validate(schema, document);\r\n\r\n  if (validationErrors.length > 0) {\r\n    return {\r\n      errors: validationErrors\r\n    };\r\n  } // Execute\r\n\r\n\r\n  return execute({\r\n    schema: schema,\r\n    document: document,\r\n    rootValue: rootValue,\r\n    contextValue: contextValue,\r\n    variableValues: variableValues,\r\n    operationName: operationName,\r\n    fieldResolver: fieldResolver,\r\n    typeResolver: typeResolver\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}