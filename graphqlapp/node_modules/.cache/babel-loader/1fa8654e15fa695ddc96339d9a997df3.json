{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { QueryData } from \"../../data/index.js\";\nimport { useDeepMemo } from \"./useDeepMemo.js\";\nimport { getApolloContext } from \"../../context/index.js\";\nexport function useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}","map":{"version":3,"sources":["../../../../src/react/hooks/utils/useBaseQuery.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,SAArB,EAAgC,UAAhC,EAA4C,MAA5C,QAA0D,OAA1D;AAUA,SAAS,SAAT,QAA0B,qBAA1B;AACA,SAAS,WAAT,QAA4B,kBAA5B;AAEA,SAAS,gBAAT,QAAiC,wBAAjC;AAEA,OAAM,SAAU,YAAV,CACJ,KADI,EAEJ,OAFI,EAGJ,IAHI,EAGQ;AAAZ,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,KAAA;AAAY;;AAEZ,MAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAA1B;;AACM,MAAA,EAAA,GAAsB,UAAU,CAAC,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,GAAD,CAAA;AAAK,GAAX,EAAa,CAAb,CAAhC;AAAA,MAAC,IAAI,GAAA,EAAA,CAAA,CAAA,CAAL;AAAA,MAAO,WAAW,GAAA,EAAA,CAAA,CAAA,CAAlB;;AACN,MAAM,cAAc,GAAG,OAAO,GAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;AAAE,IAAA,KAAK,EAAA;AAAP,GAAb,CAAF,GAA2B;AAAE,IAAA,KAAK,EAAA;AAAP,GAAzD;AAEA,MAAM,YAAY,GAAG,MAAM,EAA3B;AACA,MAAM,SAAS,GACb,YAAY,CAAC,OAAb,IACA,IAAI,SAAJ,CAAiC;AAC/B,IAAA,OAAO,EAAE,cADsB;AAE/B,IAAA,OAAO,EAAA,OAFwB;AAG/B,IAAA,SAAS,EAAA,YAAA;AACP,UAAI,CAAC,SAAS,CAAC,YAAV,EAAL,EAA+B;AAK7B,QAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,WAAvB;AACD,OAND,MAMO;AAGL,QAAA,WAAW;AACZ;AACF;AAf8B,GAAjC,CAFF;AAoBA,EAAA,SAAS,CAAC,UAAV,CAAqB,cAArB;AACA,EAAA,SAAS,CAAC,OAAV,GAAoB,OAApB;;AAKA,MAAI,SAAS,CAAC,YAAV,MAA4B,CAAC,YAAY,CAAC,OAA9C,EAAuD;AACrD,IAAA,YAAY,CAAC,OAAb,GAAuB,SAAvB;AACD;;AAKD,MAAM,IAAI,GAAG;AACX,IAAA,OAAO,EAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EACJ,cADI,CAAA,EACU;AACjB,MAAA,OAAO,EAAE,SADQ;AAEjB,MAAA,WAAW,EAAE;AAFI,KADV,CADE;AAMX,IAAA,OAAO,EAAA,OANI;AAOX,IAAA,IAAI,EAAA;AAPO,GAAb;AAUA,MAAM,MAAM,GAAG,WAAW,CACxB,YAAA;AAAM,WAAC,IAAI,GAAG,SAAS,CAAC,WAAV,EAAH,GAA6B,SAAS,CAA3C,OAAkC,EAAlC;AAAsD,GADpC,EAExB,IAFwB,CAA1B;AAKA,MAAM,WAAW,GAAG,IAAI,GACnB,MAAwC,CAAC,CAAD,CADrB,GAEnB,MAFL;AAIA,EAAA,SAAS,CAAC,YAAA;AAGR,QAAI,CAAC,YAAY,CAAC,OAAlB,EAA2B;AACzB,MAAA,YAAY,CAAC,OAAb,GAAuB,SAAvB;AACD;;AAED,WAAO,YAAA;AAAM,aAAA,SAAS,CAAT,OAAA,EAAA;AAAmB,KAAhC;AACD,GARQ,EAQN,EARM,CAAT;AAUA,EAAA,SAAS,CAAC,YAAA;AAAM,WAAA,SAAS,CAAC,YAAV,CAAuB;AAAE,MAAA,IAAI,EAA7B;AAAuB,KAAvB,CAAA;AAAgC,GAAvC,EAAyC,CAChD,WAAW,CAAC,OADoC,EAEhD,WAAW,CAAC,aAFoC,EAGhD,WAAW,CAAC,KAHoC,EAIhD,WAAW,CAAC,IAJoC,CAAzC,CAAT;AAOA,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\r\nimport { useContext, useEffect, useReducer, useRef } from 'react';\r\nimport { QueryData } from \"../../data/index.js\";\r\nimport { useDeepMemo } from \"./useDeepMemo.js\";\r\nimport { getApolloContext } from \"../../context/index.js\";\r\nexport function useBaseQuery(query, options, lazy) {\r\n    if (lazy === void 0) { lazy = false; }\r\n    var context = useContext(getApolloContext());\r\n    var _a = useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];\r\n    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };\r\n    var queryDataRef = useRef();\r\n    var queryData = queryDataRef.current ||\r\n        new QueryData({\r\n            options: updatedOptions,\r\n            context: context,\r\n            onNewData: function () {\r\n                if (!queryData.ssrInitiated()) {\r\n                    Promise.resolve().then(forceUpdate);\r\n                }\r\n                else {\r\n                    forceUpdate();\r\n                }\r\n            }\r\n        });\r\n    queryData.setOptions(updatedOptions);\r\n    queryData.context = context;\r\n    if (queryData.ssrInitiated() && !queryDataRef.current) {\r\n        queryDataRef.current = queryData;\r\n    }\r\n    var memo = {\r\n        options: __assign(__assign({}, updatedOptions), { onError: undefined, onCompleted: undefined }),\r\n        context: context,\r\n        tick: tick\r\n    };\r\n    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);\r\n    var queryResult = lazy\r\n        ? result[1]\r\n        : result;\r\n    useEffect(function () {\r\n        if (!queryDataRef.current) {\r\n            queryDataRef.current = queryData;\r\n        }\r\n        return function () { return queryData.cleanup(); };\r\n    }, []);\r\n    useEffect(function () { return queryData.afterExecute({ lazy: lazy }); }, [\r\n        queryResult.loading,\r\n        queryResult.networkStatus,\r\n        queryResult.error,\r\n        queryResult.data,\r\n    ]);\r\n    return result;\r\n}\r\n//# sourceMappingURL=useBaseQuery.js.map"]},"metadata":{},"sourceType":"module"}