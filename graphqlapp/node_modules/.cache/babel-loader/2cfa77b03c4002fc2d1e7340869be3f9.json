{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zer00/works/web/graphqlapp/src/GetCats.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n//\n// const GetCats = () => (\n//     <Query query={gql`\n//    query{\n//   cats{\n//     id\n//     name\n//   }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.cats.map(({id, name}) => (\n//                         <li key={id}>{name ? name : 'incognoito'}</li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default GetCats\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport React from \"react\";\nconst GET_Cats = gql`\n    query{\n        cats{\n            id\n            name\n      }\n    }\n`;\nconst ADD_CAT = gql`\n    mutation($name : String!) {\n        createCat(name: $name) {\n            id\n            name\n        }\n    }\n`;\nexport default function GetCats() {\n  _s();\n\n  let input;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_Cats);\n  const [addCat] = useMutation(ADD_CAT);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        addCat({\n          variables: {\n            name: input.value\n          }\n        });\n        input.value = '';\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: node => {\n          input = node;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Cat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.cats.map(({\n        id,\n        name\n      }) => /*#__PURE__*/_jsxDEV(\"li\", {\n        value: name,\n        children: name\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GetCats, \"dZsYA1w/TcHNZqpeypTCzop9Q8g=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = GetCats;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetCats\");","map":{"version":3,"sources":["/home/zer00/works/web/graphqlapp/src/GetCats.js"],"names":["gql","useQuery","useMutation","React","GET_Cats","ADD_CAT","GetCats","input","loading","error","data","addCat","message","e","preventDefault","variables","name","value","node","cats","map","id"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGJ,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AAQA,MAAMK,OAAO,GAAGL,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AAQA,eAAe,SAASM,OAAT,GAAmB;AAAA;;AAC9B,MAAIC,KAAJ;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACG,QAAD,CAAzC;AACA,QAAM,CAACO,MAAD,IAAYT,WAAW,CAACG,OAAD,CAA7B;AAEA,MAAIG,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACG,OAAQ,EAA/B;AAEX,sBACI;AAAA,4BACI;AACI,MAAA,QAAQ,EAAEC,CAAC,IAAI;AACXA,QAAAA,CAAC,CAACC,cAAF;AACAH,QAAAA,MAAM,CAAC;AAACI,UAAAA,SAAS,EAAC;AAACC,YAAAA,IAAI,EAAET,KAAK,CAACU;AAAb;AAAX,SAAD,CAAN;AACAV,QAAAA,KAAK,CAACU,KAAN,GAAc,EAAd;AACH,OALL;AAAA,8BAMI;AAAO,QAAA,GAAG,EAAEC,IAAI,IAAG;AACfX,UAAAA,KAAK,GAAGW,IAAR;AACH;AAFD;AAAA;AAAA;AAAA;AAAA,cANJ,eASI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaA;AAAA,gBACKR,IAAI,CAACS,IAAL,CAAUC,GAAV,CAAc,CAAC;AAACC,QAAAA,EAAD;AAAKL,QAAAA;AAAL,OAAD,kBACX;AAAa,QAAA,KAAK,EAAEA,IAApB;AAAA,kBACKA;AADL,SAASK,EAAT;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAbA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH;;GAjCuBf,O;UAEaL,Q,EACfC,W;;;KAHEI,O","sourcesContent":["// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n//\n// const GetCats = () => (\n//     <Query query={gql`\n//    query{\n//   cats{\n//     id\n//     name\n//   }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.cats.map(({id, name}) => (\n//                         <li key={id}>{name ? name : 'incognoito'}</li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default GetCats\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport React from \"react\";\nconst GET_Cats = gql`\n    query{\n        cats{\n            id\n            name\n      }\n    }\n`;\nconst ADD_CAT = gql`\n    mutation($name : String!) {\n        createCat(name: $name) {\n            id\n            name\n        }\n    }\n`;\nexport default function GetCats() {\n    let input;\n    const { loading, error, data } = useQuery(GET_Cats);\n    const [addCat,] = useMutation(ADD_CAT);\n\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    addCat({variables:{name: input.value}});\n                    input.value = '';\n                }}>\n                <input ref={node =>{\n                    input = node;\n                }}/>\n                <button type=\"submit\">Add Cat</button>\n            </form>\n\n        <ul>\n            {data.cats.map(({id, name}) => (\n                <li key={id} value={name}>\n                    {name}\n                </li>\n            ))}\n        </ul>\n        </div>\n\n    );\n\n}\n\n"]},"metadata":{},"sourceType":"module"}