{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { SYMBOL_ITERATOR } from \"../polyfills/symbols.mjs\";\n/**\r\n * Returns true if the provided object is an Object (i.e. not a string literal)\r\n * and is either Iterable or Array-like.\r\n *\r\n * This may be used in place of [Array.isArray()][isArray] to determine if an\r\n * object should be iterated-over. It always excludes string literals and\r\n * includes Arrays (regardless of if it is Iterable). It also includes other\r\n * Array-like objects such as NodeList, TypedArray, and Buffer.\r\n *\r\n * @example\r\n *\r\n * isCollection([ 1, 2, 3 ]) // true\r\n * isCollection('ABC') // false\r\n * isCollection({ length: 1, 0: 'Alpha' }) // true\r\n * isCollection({ key: 'value' }) // false\r\n * isCollection(new Map()) // true\r\n *\r\n * @param obj\r\n *   An Object value which might implement the Iterable or Array-like protocols.\r\n * @return {boolean} true if Iterable or Array-like Object.\r\n */\n\nexport default function isCollection(obj) {\n  if (obj == null || _typeof(obj) !== 'object') {\n    return false;\n  } // Is Array like?\n\n\n  var length = obj.length;\n\n  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {\n    return true;\n  } // Is Iterable?\n\n\n  return typeof obj[SYMBOL_ITERATOR] === 'function';\n}","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/jsutils/isCollection.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","SYMBOL_ITERATOR","isCollection","length"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASK,eAAT,QAAgC,0BAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBN,GAAtB,EAA2B;AACxC,MAAIA,GAAG,IAAI,IAAP,IAAeD,OAAO,CAACC,GAAD,CAAP,KAAiB,QAApC,EAA8C;AAC5C,WAAO,KAAP;AACD,GAHuC,CAGtC;;;AAGF,MAAIO,MAAM,GAAGP,GAAG,CAACO,MAAjB;;AAEA,MAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,IAAI,CAAxC,IAA6CA,MAAM,GAAG,CAAT,KAAe,CAAhE,EAAmE;AACjE,WAAO,IAAP;AACD,GAVuC,CAUtC;;;AAGF,SAAO,OAAOP,GAAG,CAACK,eAAD,CAAV,KAAgC,UAAvC;AACD","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport { SYMBOL_ITERATOR } from \"../polyfills/symbols.mjs\";\r\n/**\r\n * Returns true if the provided object is an Object (i.e. not a string literal)\r\n * and is either Iterable or Array-like.\r\n *\r\n * This may be used in place of [Array.isArray()][isArray] to determine if an\r\n * object should be iterated-over. It always excludes string literals and\r\n * includes Arrays (regardless of if it is Iterable). It also includes other\r\n * Array-like objects such as NodeList, TypedArray, and Buffer.\r\n *\r\n * @example\r\n *\r\n * isCollection([ 1, 2, 3 ]) // true\r\n * isCollection('ABC') // false\r\n * isCollection({ length: 1, 0: 'Alpha' }) // true\r\n * isCollection({ key: 'value' }) // false\r\n * isCollection(new Map()) // true\r\n *\r\n * @param obj\r\n *   An Object value which might implement the Iterable or Array-like protocols.\r\n * @return {boolean} true if Iterable or Array-like Object.\r\n */\r\n\r\nexport default function isCollection(obj) {\r\n  if (obj == null || _typeof(obj) !== 'object') {\r\n    return false;\r\n  } // Is Array like?\r\n\r\n\r\n  var length = obj.length;\r\n\r\n  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {\r\n    return true;\r\n  } // Is Iterable?\r\n\r\n\r\n  return typeof obj[SYMBOL_ITERATOR] === 'function';\r\n}\r\n"]},"metadata":{},"sourceType":"module"}