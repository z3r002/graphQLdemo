{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(42) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 43) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArrays([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        process.env.NODE_ENV === \"production\" ? invariant(fragment, 44) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n        return fragment;\n      }\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/fragments.ts"],"names":[],"mappings":";AAMA,SAAS,SAAT,EAAoB,cAApB,QAA0C,cAA1C;AAwBA,OAAM,SAAU,wBAAV,CACJ,QADI,EAEJ,YAFI,EAEiB;AAErB,MAAI,kBAAkB,GAAG,YAAzB;AAKA,MAAM,SAAS,GAAkC,EAAjD;AACA,EAAA,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAA6B,UAAA,UAAA,EAAU;AAGrC,QAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;AAC7C,YAAM,OAAI,CAAA,GAAJ,CAAI,QAAJ,KACJ,YADI,GACO,IAAW,cAAX,CAAoB,EAApB,CADP,GAC2B,IAAA,cAAA,CAClB,aAAO,UAAW,CAAA,SAAlB,GAAkC,YAAlC,IAA+C,UACxD,CAAA,IADwD,GACxD,aAAA,UAAA,CAAA,IAAA,CAAA,KAAA,GAAA,GADwD,GACxD,EADS,IACT,IADS,GAEX,yFAH6B,CADjC;AAMD;;AAGD,QAAI,UAAU,CAAC,IAAX,KAAoB,oBAAxB,EAA8C;AAC5C,MAAA,SAAS,CAAC,IAAV,CAAe,UAAf;AACD;AACF,GAhBD;;AAoBA,MAAI,OAAO,kBAAP,KAA8B,WAAlC,EAA+C;AAC7C,IAAA,OAAA,CAAA,GAAA,CACE,QADF,KACY,YADZ,GAEE,SACE,CAAA,SAAU,CAAA,MAAV,KAAgB,CAAhB,EAAgB,EAAhB,CAHJ,GAGoB,SAAA,CAAA,SAAA,CAAA,MAAA,KAAA,CAAA,EAAA,WAAA,SAAA,CAAA,MAAA,GAAA,mFAAA,CAHpB;AAMA,IAAA,kBAAkB,GAAG,SAAS,CAAC,CAAD,CAAT,CAAa,IAAb,CAAkB,KAAvC;AACD;;AAID,MAAM,KAAK,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,QADM,CAAA,EACE;AACX,IAAA,WAAW,EAAA,cAAA,CAAA,CACT;AACE,MAAA,IAAI,EAAE,qBADR;AAEE,MAAA,SAAS,EAAE,OAFb;AAGE,MAAA,YAAY,EAAE;AACZ,QAAA,IAAI,EAAE,cADM;AAEZ,QAAA,UAAU,EAAE,CACV;AACE,UAAA,IAAI,EAAE,gBADR;AAEE,UAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,MADF;AAEJ,YAAA,KAAK,EAAE;AAFH;AAFR,SADU;AAFA;AAHhB,KADS,CAAA,EAiBN,QAAQ,CAAC,WAjBH;AADA,GADF,CAAX;;AAuBA,SAAO,KAAP;AACD;AAWD,OAAM,SAAU,iBAAV,CACJ,SADI,EACoC;AAAxC,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,EAAA;AAAwC;;AAExC,MAAM,QAAQ,GAAgB,EAA9B;AACA,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,QAAA,EAAQ;AACxB,IAAA,QAAQ,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAf,CAAR,GAAgC,QAAhC;AACD,GAFD;AAGA,SAAO,QAAP;AACD;AAED,OAAM,SAAU,wBAAV,CACJ,SADI,EAEJ,WAFI,EAEqB;AAEzB,UAAQ,SAAS,CAAC,IAAlB;AACE,SAAK,gBAAL;AACE,aAAO,SAAP;;AACF,SAAK,gBAAL;AAAuB;AACrB,YAAM,QAAQ,GAAG,WAAW,IAAI,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAA3C;AACA,QAAA,OAAA,CAAA,GAAA,CAAU,QAAV,KAAoB,YAApB,GAAoB,SAAqB,CAAA,QAAA,EAAe,EAAf,CAAzC,GAA6D,SAAK,CAAA,QAAA,EAAA,uBAAA,SAAA,CAAA,IAAA,CAAA,KAAA,GAAA,GAAA,CAAlE;AACA,eAAO,QAAP;AACD;;AACD;AACE,aAAO,IAAP;AATJ;AAWD","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\r\nimport { invariant, InvariantError } from 'ts-invariant';\r\nexport function getFragmentQueryDocument(document, fragmentName) {\r\n    var actualFragmentName = fragmentName;\r\n    var fragments = [];\r\n    document.definitions.forEach(function (definition) {\r\n        if (definition.kind === 'OperationDefinition') {\r\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(42) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\r\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\r\n        }\r\n        if (definition.kind === 'FragmentDefinition') {\r\n            fragments.push(definition);\r\n        }\r\n    });\r\n    if (typeof actualFragmentName === 'undefined') {\r\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 43) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\r\n        actualFragmentName = fragments[0].name.value;\r\n    }\r\n    var query = __assign(__assign({}, document), { definitions: __spreadArrays([\r\n            {\r\n                kind: 'OperationDefinition',\r\n                operation: 'query',\r\n                selectionSet: {\r\n                    kind: 'SelectionSet',\r\n                    selections: [\r\n                        {\r\n                            kind: 'FragmentSpread',\r\n                            name: {\r\n                                kind: 'Name',\r\n                                value: actualFragmentName,\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            }\r\n        ], document.definitions) });\r\n    return query;\r\n}\r\nexport function createFragmentMap(fragments) {\r\n    if (fragments === void 0) { fragments = []; }\r\n    var symTable = {};\r\n    fragments.forEach(function (fragment) {\r\n        symTable[fragment.name.value] = fragment;\r\n    });\r\n    return symTable;\r\n}\r\nexport function getFragmentFromSelection(selection, fragmentMap) {\r\n    switch (selection.kind) {\r\n        case 'InlineFragment':\r\n            return selection;\r\n        case 'FragmentSpread': {\r\n            var fragment = fragmentMap && fragmentMap[selection.name.value];\r\n            process.env.NODE_ENV === \"production\" ? invariant(fragment, 44) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\r\n            return fragment;\r\n        }\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"module"}