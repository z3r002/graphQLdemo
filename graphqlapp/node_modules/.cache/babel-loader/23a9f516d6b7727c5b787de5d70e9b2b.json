{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zer00/works/web/graphqlapp/src/countries.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n// const Counties = () => (\n//     <Query query={gql`\n//          query GetContinent{\n//     countries{\n//     name\n//     }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.countries.map(({id, name}) => (\n//                         <li key={id}><a>{name ? name : 'incognoito'}</a></li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default Counties\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport * as GetCountries from './GetCountries.graphql';\n\nconst Counties = () => {\n  _s();\n\n  const {\n    data,\n    loading\n  } = useQuery(GetCountries);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: ({\n      loading,\n      data\n    }) => {\n      console.log('data', data);\n      if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 33\n      }, this);\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data.countries.map(({\n          id,\n          name\n        }) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: name ? name : 'incognoito'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 38\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Counties, \"PHn2gljn94SqZyJKY8xIsFoNOcQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = Counties;\nexport default Counties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counties\");","map":{"version":3,"sources":["/home/zer00/works/web/graphqlapp/src/countries.js"],"names":["React","useQuery","GetCountries","Counties","data","loading","console","log","countries","map","id","name"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;;AACA,MAAMC,QAAQ,GAAI,MAAM;AAAA;;AACpB,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBJ,QAAQ,CAACC,YAAD,CAAhC;AACA,sBACI;AAAA,cACK,CAAC;AAACG,MAAAA,OAAD;AAAWD,MAAAA;AAAX,KAAD,KAAsB;AACvBE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AACA,UAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACb,0BACI;AAAA,kBACKD,IAAI,CAACI,SAAL,CAAeC,GAAf,CAAmB,CAAC;AAACC,UAAAA,EAAD;AAAKC,UAAAA;AAAL,SAAD,kBAChB;AAAA,iCAAa;AAAA,sBAAIA,IAAI,GAAGA,IAAH,GAAU;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAb,WAASD,EAAT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;AAXD;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAjBD;;GAAMP,Q;UACsBF,Q;;;KADtBE,Q;AAkBN,eAAeA,QAAf","sourcesContent":["// import React from 'react';\n// import {Query} from \"react-apollo\";\n// import gql from \"graphql-tag\";\n//\n// const Counties = () => (\n//     <Query query={gql`\n//          query GetContinent{\n//     countries{\n//     name\n//     }\n// }\n// `}>\n//         {({loading, error, data}) => {\n//             console.log('data', data)\n//             if (loading) return <p>Loading...</p>;\n//             if (error) return <p>Error :(</p>;\n//\n//             return (\n//                 <ul>\n//                     {data.countries.map(({id, name}) => (\n//                         <li key={id}><a>{name ? name : 'incognoito'}</a></li>\n//                     ))}\n//                 </ul>\n//             );\n//         }}\n//\n//     </Query>\n// );\n// export default Counties\nimport React from 'react';\nimport {useQuery} from '@apollo/react-hooks';\nimport * as GetCountries from './GetCountries.graphql'\nconst Counties =  () => {\n    const {data, loading} = useQuery(GetCountries);\n    return (\n        <div>\n            {({loading,  data}) => {\n            console.log('data', data)\n            if (loading) return <p>Loading...</p>;\n            return (\n                <ul>\n                    {data.countries.map(({id, name}) => (\n                        <li key={id}><a>{name ? name : 'incognoito'}</a></li>\n                    ))}\n                </ul>\n            );\n        }}\n        </div>\n    );\n}\nexport default Counties\n"]},"metadata":{},"sourceType":"module"}