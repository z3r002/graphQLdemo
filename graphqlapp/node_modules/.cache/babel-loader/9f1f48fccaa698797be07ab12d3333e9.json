{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n/**\r\n * Variables are input types\r\n *\r\n * A GraphQL operation is only valid if all the variables it defines are of\r\n * input types (scalar, enum, or input object).\r\n */\n\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        var typeName = print(node.type);\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"],"names":["GraphQLError","print","isInputType","typeFromAST","VariablesAreInputTypesRule","context","VariableDefinition","node","type","getSchema","variableName","variable","name","value","typeName","reportError","concat"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,OAApC,EAA6C;AAClD,SAAO;AACLC,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpD,UAAIC,IAAI,GAAGL,WAAW,CAACE,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,IAA3B,CAAtB;;AAEA,UAAIA,IAAI,IAAI,CAACN,WAAW,CAACM,IAAD,CAAxB,EAAgC;AAC9B,YAAIE,YAAY,GAAGH,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBC,KAAtC;AACA,YAAIC,QAAQ,GAAGb,KAAK,CAACM,IAAI,CAACC,IAAN,CAApB;AACAH,QAAAA,OAAO,CAACU,WAAR,CAAoB,IAAIf,YAAJ,CAAiB,eAAegB,MAAf,CAAsBN,YAAtB,EAAoC,gCAApC,EAAsEM,MAAtE,CAA6EF,QAA7E,EAAuF,KAAvF,CAAjB,EAAgHP,IAAI,CAACC,IAArH,CAApB;AACD;AACF;AATI,GAAP;AAWD","sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\r\nimport { print } from \"../../language/printer.mjs\";\r\nimport { isInputType } from \"../../type/definition.mjs\";\r\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\r\n\r\n/**\r\n * Variables are input types\r\n *\r\n * A GraphQL operation is only valid if all the variables it defines are of\r\n * input types (scalar, enum, or input object).\r\n */\r\nexport function VariablesAreInputTypesRule(context) {\r\n  return {\r\n    VariableDefinition: function VariableDefinition(node) {\r\n      var type = typeFromAST(context.getSchema(), node.type);\r\n\r\n      if (type && !isInputType(type)) {\r\n        var variableName = node.variable.name.value;\r\n        var typeName = print(node.type);\r\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\r\n      }\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}