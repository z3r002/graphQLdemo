{"ast":null,"code":"/**\r\n * GraphQL.js provides a reference implementation for the GraphQL specification\r\n * but is also a useful utility for operating on GraphQL files and building\r\n * sophisticated tools.\r\n *\r\n * This primary module exports a general purpose function for fulfilling all\r\n * steps of the GraphQL specification in a single operation, but also includes\r\n * utilities for every part of the GraphQL specification:\r\n *\r\n *   - Parsing the GraphQL language.\r\n *   - Building a GraphQL type schema.\r\n *   - Validating a GraphQL request against a type schema.\r\n *   - Executing a GraphQL request against a type schema.\r\n *\r\n * This also includes utility functions for operating on GraphQL types and\r\n * GraphQL documents to facilitate building tools.\r\n *\r\n * You may also import from each sub-directory directly. For example, the\r\n * following two import statements are equivalent:\r\n *\r\n *     import { parse } from 'graphql';\r\n *     import { parse } from 'graphql/language';\r\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from \"./version.mjs\"; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from \"./graphql.mjs\"; // Create and operate on GraphQL type definitions and schema.\n\nexport { // Definitions\nGraphQLSchema, GraphQLDirective, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull // Standard GraphQL Scalars\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID // Built-in Directives defined by the Spec\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective // \"Enum\" of Type Kinds\n, TypeKind // Constant Deprecation Reason\n, DEFAULT_DEPRECATION_REASON // GraphQL Types for introspection.\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind // Meta-field definitions.\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef // Predicates\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective // Assertions\n, assertSchema, assertDirective, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType // Un-modifiers\n, getNullableType, getNamedType // Validate GraphQL schema.\n, validateSchema, assertValidSchema } from \"./type/index.mjs\"; // Parse and operate on GraphQL language source files.\n\nexport { Token, Source, Location, getLocation // Print source location\n, printLocation, printSourceLocation // Lex\n, Lexer, TokenKind // Parse\n, parse, parseValue, parseType // Print\n, print // Visit\n, visit, visitInParallel, getVisitFn, BREAK, Kind, DirectiveLocation // Predicates\n, isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from \"./language/index.mjs\"; // Execute GraphQL queries.\n\nexport { execute, executeSync, defaultFieldResolver, defaultTypeResolver, responsePathAsArray, getDirectiveValues } from \"./execution/index.mjs\";\nexport { subscribe, createSourceEventStream } from \"./subscription/index.mjs\"; // Validate GraphQL documents.\n\nexport { validate, ValidationContext // All validation rules in the GraphQL Specification.\n, specifiedRules // Individual validation rules.\n, ExecutableDefinitionsRule, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule // SDL-specific validation rules\n, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, PossibleTypeExtensionsRule // Custom validation rules\n, NoDeprecatedCustomRule, NoSchemaIntrospectionCustomRule } from \"./validation/index.mjs\"; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, syntaxError, locatedError, printError, formatError } from \"./error/index.mjs\"; // Utilities for operating on GraphQL type schema and parsed sources.\n\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery // Gets the target Operation from a Document.\n, getOperationAST // Gets the Type for the target Operation AST.\n, getOperationRootType // Convert a GraphQLSchema to an IntrospectionQuery.\n, introspectionFromSchema // Build a GraphQLSchema from an introspection result.\n, buildClientSchema // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n, buildASTSchema // Build a GraphQLSchema from a GraphQL schema language document.\n, buildSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\n, getDescription // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\n, extendSchema // Sort a GraphQLSchema.\n, lexicographicSortSchema // Print a GraphQLSchema to GraphQL Schema language.\n, printSchema // Print a GraphQLType to GraphQL Schema language.\n, printType // Prints the built-in introspection schema in the Schema Language\n// format.\n, printIntrospectionSchema // Create a GraphQLType from a GraphQL language AST.\n, typeFromAST // Create a JavaScript value from a GraphQL language AST with a Type.\n, valueFromAST // Create a JavaScript value from a GraphQL language AST without a Type.\n, valueFromASTUntyped // Create a GraphQL language AST from a JavaScript value.\n, astFromValue // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n, TypeInfo, visitWithTypeInfo // Coerces a JavaScript value to a GraphQL type, or produces errors.\n, coerceInputValue // Concatenates multiple AST together.\n, concatAST // Separates an AST into an AST per Operation.\n, separateOperations // Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\n, stripIgnoredCharacters // Comparators for types\n, isEqualType, isTypeSubTypeOf, doTypesOverlap // Asserts a string is a valid GraphQL name.\n, assertValidName // Determine if a string is a valid GraphQL name.\n, isValidNameError // Compares two GraphQLSchemas and detects breaking changes.\n, BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges // @deprecated: Report all deprecated usage within a GraphQL document.\n, findDeprecatedUsages } from \"./utilities/index.mjs\";","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/index.mjs"],"names":["version","versionInfo","graphql","graphqlSync","GraphQLSchema","GraphQLDirective","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","specifiedScalarTypes","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLBoolean","GraphQLID","specifiedDirectives","GraphQLIncludeDirective","GraphQLSkipDirective","GraphQLDeprecatedDirective","GraphQLSpecifiedByDirective","TypeKind","DEFAULT_DEPRECATION_REASON","introspectionTypes","__Schema","__Directive","__DirectiveLocation","__Type","__Field","__InputValue","__EnumValue","__TypeKind","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isSchema","isDirective","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isInputType","isOutputType","isLeafType","isCompositeType","isAbstractType","isWrappingType","isNullableType","isNamedType","isRequiredArgument","isRequiredInputField","isSpecifiedScalarType","isIntrospectionType","isSpecifiedDirective","assertSchema","assertDirective","assertType","assertScalarType","assertObjectType","assertInterfaceType","assertUnionType","assertEnumType","assertInputObjectType","assertListType","assertNonNullType","assertInputType","assertOutputType","assertLeafType","assertCompositeType","assertAbstractType","assertWrappingType","assertNullableType","assertNamedType","getNullableType","getNamedType","validateSchema","assertValidSchema","Token","Source","Location","getLocation","printLocation","printSourceLocation","Lexer","TokenKind","parse","parseValue","parseType","print","visit","visitInParallel","getVisitFn","BREAK","Kind","DirectiveLocation","isDefinitionNode","isExecutableDefinitionNode","isSelectionNode","isValueNode","isTypeNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","execute","executeSync","defaultFieldResolver","defaultTypeResolver","responsePathAsArray","getDirectiveValues","subscribe","createSourceEventStream","validate","ValidationContext","specifiedRules","ExecutableDefinitionsRule","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedRequiredArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","PossibleTypeExtensionsRule","NoDeprecatedCustomRule","NoSchemaIntrospectionCustomRule","GraphQLError","syntaxError","locatedError","printError","formatError","getIntrospectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","getDescription","extendSchema","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","visitWithTypeInfo","coerceInputValue","concatAST","separateOperations","stripIgnoredCharacters","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges","findDeprecatedUsages"],"mappings":"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","sourcesContent":["/**\r\n * GraphQL.js provides a reference implementation for the GraphQL specification\r\n * but is also a useful utility for operating on GraphQL files and building\r\n * sophisticated tools.\r\n *\r\n * This primary module exports a general purpose function for fulfilling all\r\n * steps of the GraphQL specification in a single operation, but also includes\r\n * utilities for every part of the GraphQL specification:\r\n *\r\n *   - Parsing the GraphQL language.\r\n *   - Building a GraphQL type schema.\r\n *   - Validating a GraphQL request against a type schema.\r\n *   - Executing a GraphQL request against a type schema.\r\n *\r\n * This also includes utility functions for operating on GraphQL types and\r\n * GraphQL documents to facilitate building tools.\r\n *\r\n * You may also import from each sub-directory directly. For example, the\r\n * following two import statements are equivalent:\r\n *\r\n *     import { parse } from 'graphql';\r\n *     import { parse } from 'graphql/language';\r\n */\r\n// The GraphQL.js version info.\r\nexport { version, versionInfo } from \"./version.mjs\"; // The primary entry point into fulfilling a GraphQL request.\r\n\r\nexport { graphql, graphqlSync } from \"./graphql.mjs\"; // Create and operate on GraphQL type definitions and schema.\r\n\r\nexport { // Definitions\r\nGraphQLSchema, GraphQLDirective, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull // Standard GraphQL Scalars\r\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID // Built-in Directives defined by the Spec\r\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective // \"Enum\" of Type Kinds\r\n, TypeKind // Constant Deprecation Reason\r\n, DEFAULT_DEPRECATION_REASON // GraphQL Types for introspection.\r\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind // Meta-field definitions.\r\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef // Predicates\r\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective // Assertions\r\n, assertSchema, assertDirective, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType // Un-modifiers\r\n, getNullableType, getNamedType // Validate GraphQL schema.\r\n, validateSchema, assertValidSchema } from \"./type/index.mjs\";\r\n// Parse and operate on GraphQL language source files.\r\nexport { Token, Source, Location, getLocation // Print source location\r\n, printLocation, printSourceLocation // Lex\r\n, Lexer, TokenKind // Parse\r\n, parse, parseValue, parseType // Print\r\n, print // Visit\r\n, visit, visitInParallel, getVisitFn, BREAK, Kind, DirectiveLocation // Predicates\r\n, isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from \"./language/index.mjs\";\r\n// Execute GraphQL queries.\r\nexport { execute, executeSync, defaultFieldResolver, defaultTypeResolver, responsePathAsArray, getDirectiveValues } from \"./execution/index.mjs\";\r\nexport { subscribe, createSourceEventStream } from \"./subscription/index.mjs\";\r\n// Validate GraphQL documents.\r\nexport { validate, ValidationContext // All validation rules in the GraphQL Specification.\r\n, specifiedRules // Individual validation rules.\r\n, ExecutableDefinitionsRule, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule // SDL-specific validation rules\r\n, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, PossibleTypeExtensionsRule // Custom validation rules\r\n, NoDeprecatedCustomRule, NoSchemaIntrospectionCustomRule } from \"./validation/index.mjs\";\r\n// Create, format, and print GraphQL errors.\r\nexport { GraphQLError, syntaxError, locatedError, printError, formatError } from \"./error/index.mjs\";\r\n// Utilities for operating on GraphQL type schema and parsed sources.\r\nexport { // Produce the GraphQL query recommended for a full schema introspection.\r\n// Accepts optional IntrospectionOptions.\r\ngetIntrospectionQuery // Gets the target Operation from a Document.\r\n, getOperationAST // Gets the Type for the target Operation AST.\r\n, getOperationRootType // Convert a GraphQLSchema to an IntrospectionQuery.\r\n, introspectionFromSchema // Build a GraphQLSchema from an introspection result.\r\n, buildClientSchema // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\r\n, buildASTSchema // Build a GraphQLSchema from a GraphQL schema language document.\r\n, buildSchema // @deprecated: Get the description from a schema AST node and supports legacy\r\n// syntax for specifying descriptions - will be removed in v16.\r\n, getDescription // Extends an existing GraphQLSchema from a parsed GraphQL Schema\r\n// language AST.\r\n, extendSchema // Sort a GraphQLSchema.\r\n, lexicographicSortSchema // Print a GraphQLSchema to GraphQL Schema language.\r\n, printSchema // Print a GraphQLType to GraphQL Schema language.\r\n, printType // Prints the built-in introspection schema in the Schema Language\r\n// format.\r\n, printIntrospectionSchema // Create a GraphQLType from a GraphQL language AST.\r\n, typeFromAST // Create a JavaScript value from a GraphQL language AST with a Type.\r\n, valueFromAST // Create a JavaScript value from a GraphQL language AST without a Type.\r\n, valueFromASTUntyped // Create a GraphQL language AST from a JavaScript value.\r\n, astFromValue // A helper to use within recursive-descent visitors which need to be aware of\r\n// the GraphQL type system.\r\n, TypeInfo, visitWithTypeInfo // Coerces a JavaScript value to a GraphQL type, or produces errors.\r\n, coerceInputValue // Concatenates multiple AST together.\r\n, concatAST // Separates an AST into an AST per Operation.\r\n, separateOperations // Strips characters that are not significant to the validity or execution\r\n// of a GraphQL document.\r\n, stripIgnoredCharacters // Comparators for types\r\n, isEqualType, isTypeSubTypeOf, doTypesOverlap // Asserts a string is a valid GraphQL name.\r\n, assertValidName // Determine if a string is a valid GraphQL name.\r\n, isValidNameError // Compares two GraphQLSchemas and detects breaking changes.\r\n, BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges // @deprecated: Report all deprecated usage within a GraphQL document.\r\n, findDeprecatedUsages } from \"./utilities/index.mjs\";\r\n"]},"metadata":{},"sourceType":"module"}