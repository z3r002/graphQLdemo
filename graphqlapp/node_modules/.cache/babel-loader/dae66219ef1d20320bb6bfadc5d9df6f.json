{"ast":null,"code":"import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n  if (result && typeof result === \"object\") {\n    return Array.isArray(result) ? result.every(function (item) {\n      return selectionSetMatchesResult(selectionSet, item, variables);\n    }) : selectionSet.selections.every(function (field) {\n      if (isField(field) && shouldInclude(field, variables)) {\n        var key = resultKeyNameFromField(field);\n        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n      }\n\n      return true;\n    });\n  }\n\n  return false;\n}\nexport function storeValueIsStoreObject(value) {\n  return value !== null && typeof value === \"object\" && !isReference(value) && !Array.isArray(value);\n}\nexport function isFieldValueToBeMerged(value) {\n  var field = value && value.__field;\n  return field && isField(field);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger(reconcileProcessedFields);\n}\n\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n\n  if (isFieldValueToBeMerged(existing)) {\n    existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);\n    return existing;\n  }\n\n  if (isFieldValueToBeMerged(incoming)) {\n    incoming.__value = this.merge(existing, incoming.__value);\n    return incoming;\n  }\n\n  return this.merge(existing, incoming);\n};","map":{"version":3,"sources":["../../../src/cache/inmemory/helpers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude, } from \"../../utilities/index.js\";\r\nexport var hasOwn = Object.prototype.hasOwnProperty;\r\nexport function getTypenameFromStoreObject(store, objectOrReference) {\r\n    return isReference(objectOrReference)\r\n        ? store.get(objectOrReference.__ref, \"__typename\")\r\n        : objectOrReference && objectOrReference.__typename;\r\n}\r\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\r\nexport function fieldNameFromStoreName(storeFieldName) {\r\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\r\n    return match ? match[0] : storeFieldName;\r\n}\r\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\r\n    if (result && typeof result === \"object\") {\r\n        return Array.isArray(result)\r\n            ? result.every(function (item) { return selectionSetMatchesResult(selectionSet, item, variables); })\r\n            : selectionSet.selections.every(function (field) {\r\n                if (isField(field) && shouldInclude(field, variables)) {\r\n                    var key = resultKeyNameFromField(field);\r\n                    return hasOwn.call(result, key) &&\r\n                        (!field.selectionSet ||\r\n                            selectionSetMatchesResult(field.selectionSet, result[key], variables));\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n    return false;\r\n}\r\nexport function storeValueIsStoreObject(value) {\r\n    return value !== null &&\r\n        typeof value === \"object\" &&\r\n        !isReference(value) &&\r\n        !Array.isArray(value);\r\n}\r\nexport function isFieldValueToBeMerged(value) {\r\n    var field = value && value.__field;\r\n    return field && isField(field);\r\n}\r\nexport function makeProcessedFieldsMerger() {\r\n    return new DeepMerger(reconcileProcessedFields);\r\n}\r\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\r\n    var existing = existingObject[property];\r\n    var incoming = incomingObject[property];\r\n    if (isFieldValueToBeMerged(existing)) {\r\n        existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming)\r\n            ? incoming.__value\r\n            : incoming);\r\n        return existing;\r\n    }\r\n    if (isFieldValueToBeMerged(incoming)) {\r\n        incoming.__value = this.merge(existing, incoming.__value);\r\n        return incoming;\r\n    }\r\n    return this.merge(existing, incoming);\r\n};\r\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}