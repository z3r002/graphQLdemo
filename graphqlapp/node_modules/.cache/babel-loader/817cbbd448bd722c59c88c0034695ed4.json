{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,QAArB,EAA+B,MAA/B,EAAuC,SAAvC,QAAwD,OAAxD;AAKA,SAAS,gBAAT,QAAiC,kBAAjC;AAEA,SAAS,gBAAT,QAAiC,qBAAjC;AAEA,OAAM,SAAU,eAAV,CACJ,YADI,EAEJ,OAFI,EAEgD;AAEpD,MAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAA1B;AACA,MAAM,cAAc,GAAG,OAAO,GAC3B,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;AAAE,IAAA,YAAY,EAAA;AAAd,GAAb,CAD2B,GAE1B;AAAE,IAAA,YAAY,EAAA;AAAd,GAFJ;;AAGM,MAAA,EAAA,GAAsB,QAAQ,CAAC;AACnC,IAAA,OAAO,EAAE,CAAC,cAAc,CAAC,IADU;AAEnC,IAAA,KAAK,EAAE,SAF4B;AAGnC,IAAA,IAAI,EAAE;AAH6B,GAAD,CAA9B;AAAA,MAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;AAAA,MAAS,SAAS,GAAA,EAAA,CAAA,CAAA,CAAlB;;AAMN,MAAM,mBAAmB,GAAG,MAAM,EAAlC;;AACA,WAAS,sBAAT,GAA+B;AAC7B,QAAI,CAAC,mBAAmB,CAAC,OAAzB,EAAkC;AAChC,MAAA,mBAAmB,CAAC,OAApB,GAA8B,IAAI,gBAAJ,CAAwC;AACpE,QAAA,OAAO,EAAE,cAD2D;AAEpE,QAAA,OAAO,EAAA,OAF6D;AAGpE,QAAA,SAAS,EAAA;AAH2D,OAAxC,CAA9B;AAKD;;AACD,WAAO,mBAAmB,CAAC,OAA3B;AACD;;AAED,MAAM,gBAAgB,GAAG,sBAAsB,EAA/C;AACA,EAAA,gBAAgB,CAAC,UAAjB,CAA4B,cAA5B,EAA4C,IAA5C;AACA,EAAA,gBAAgB,CAAC,OAAjB,GAA2B,OAA3B;AAEA,EAAA,SAAS,CAAC,YAAA;AAAM,WAAA,gBAAgB,CAAhB,YAAA,EAAA;AAA+B,GAAtC,CAAT;AACA,EAAA,SAAS,CAAC,YAAA;AAAM,WAAA,gBAAgB,CAAC,OAAjB,CAAyB,IAAzB,CAAA,gBAAA,CAAA;AAA+C,GAAtD,EAAwD,EAAxD,CAAT;AAEA,SAAO,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\r\nimport { useContext, useState, useRef, useEffect } from 'react';\r\nimport { SubscriptionData } from \"../data/index.js\";\r\nimport { getApolloContext } from \"../context/index.js\";\r\nexport function useSubscription(subscription, options) {\r\n    var context = useContext(getApolloContext());\r\n    var updatedOptions = options\r\n        ? __assign(__assign({}, options), { subscription: subscription }) : { subscription: subscription };\r\n    var _a = useState({\r\n        loading: !updatedOptions.skip,\r\n        error: undefined,\r\n        data: undefined\r\n    }), result = _a[0], setResult = _a[1];\r\n    var subscriptionDataRef = useRef();\r\n    function getSubscriptionDataRef() {\r\n        if (!subscriptionDataRef.current) {\r\n            subscriptionDataRef.current = new SubscriptionData({\r\n                options: updatedOptions,\r\n                context: context,\r\n                setResult: setResult\r\n            });\r\n        }\r\n        return subscriptionDataRef.current;\r\n    }\r\n    var subscriptionData = getSubscriptionDataRef();\r\n    subscriptionData.setOptions(updatedOptions, true);\r\n    subscriptionData.context = context;\r\n    useEffect(function () { return subscriptionData.afterExecute(); });\r\n    useEffect(function () { return subscriptionData.cleanup.bind(subscriptionData); }, []);\r\n    return subscriptionData.execute(result);\r\n}\r\n//# sourceMappingURL=useSubscription.js.map"]},"metadata":{},"sourceType":"module"}