{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n/**\r\n * Unique type names\r\n *\r\n * A GraphQL document is only valid if all defined types have unique names.\r\n */\n\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema === null || schema === void 0 ? void 0 : schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["D:/projects/graphQLdemo/graphqlapp/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"],"names":["GraphQLError","UniqueTypeNamesRule","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","value","getType","reportError","concat"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,MAAIC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;AACA,MAAIC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAb;AACA,SAAO;AACLC,IAAAA,oBAAoB,EAAEC,aADjB;AAELC,IAAAA,oBAAoB,EAAED,aAFjB;AAGLE,IAAAA,uBAAuB,EAAEF,aAHpB;AAILG,IAAAA,mBAAmB,EAAEH,aAJhB;AAKLI,IAAAA,kBAAkB,EAAEJ,aALf;AAMLK,IAAAA,yBAAyB,EAAEL;AANtB,GAAP;;AASA,WAASA,aAAT,CAAuBM,IAAvB,EAA6B;AAC3B,QAAIC,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAzB;;AAEA,QAAIZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACa,OAAP,CAAeH,QAAf,CAApD,EAA8E;AAC5Ed,MAAAA,OAAO,CAACkB,WAAR,CAAoB,IAAIpB,YAAJ,CAAiB,UAAUqB,MAAV,CAAiBL,QAAjB,EAA2B,qFAA3B,CAAjB,EAAoID,IAAI,CAACE,IAAzI,CAApB;AACA;AACD;;AAED,QAAId,cAAc,CAACa,QAAD,CAAlB,EAA8B;AAC5Bd,MAAAA,OAAO,CAACkB,WAAR,CAAoB,IAAIpB,YAAJ,CAAiB,sCAAsCqB,MAAtC,CAA6CL,QAA7C,EAAuD,KAAvD,CAAjB,EAAgF,CAACb,cAAc,CAACa,QAAD,CAAf,EAA2BD,IAAI,CAACE,IAAhC,CAAhF,CAApB;AACD,KAFD,MAEO;AACLd,MAAAA,cAAc,CAACa,QAAD,CAAd,GAA2BD,IAAI,CAACE,IAAhC;AACD;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\r\n\r\n/**\r\n * Unique type names\r\n *\r\n * A GraphQL document is only valid if all defined types have unique names.\r\n */\r\nexport function UniqueTypeNamesRule(context) {\r\n  var knownTypeNames = Object.create(null);\r\n  var schema = context.getSchema();\r\n  return {\r\n    ScalarTypeDefinition: checkTypeName,\r\n    ObjectTypeDefinition: checkTypeName,\r\n    InterfaceTypeDefinition: checkTypeName,\r\n    UnionTypeDefinition: checkTypeName,\r\n    EnumTypeDefinition: checkTypeName,\r\n    InputObjectTypeDefinition: checkTypeName\r\n  };\r\n\r\n  function checkTypeName(node) {\r\n    var typeName = node.name.value;\r\n\r\n    if (schema === null || schema === void 0 ? void 0 : schema.getType(typeName)) {\r\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\r\n      return;\r\n    }\r\n\r\n    if (knownTypeNames[typeName]) {\r\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\r\n    } else {\r\n      knownTypeNames[typeName] = node.name;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}